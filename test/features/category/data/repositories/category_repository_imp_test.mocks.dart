// Mocks generated by Mockito 5.3.2 from annotations
// in portfolio/test/features/category/data/repositories/category_repository_imp_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:portfolio/core/network/network_info.dart' as _i5;
import 'package:portfolio/features/category/data/datasources/category_local.dart'
    as _i2;
import 'package:portfolio/features/category/data/datasources/category_remote.dart'
    as _i6;
import 'package:portfolio/features/category/data/models/category_model.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CategoryLocal].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryLocal extends _i1.Mock implements _i2.CategoryLocal {
  MockCategoryLocal() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.CategoryModel>> getLastCategory() => (super.noSuchMethod(
        Invocation.method(
          #getLastCategory,
          [],
        ),
        returnValue:
            _i3.Future<List<_i4.CategoryModel>>.value(<_i4.CategoryModel>[]),
      ) as _i3.Future<List<_i4.CategoryModel>>);
  @override
  _i3.Future<void> cacheListCategory(
          List<_i4.CategoryModel>? listCategoryToCache) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheListCategory,
          [listCategoryToCache],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i5.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}

/// A class which mocks [CategoryRemote].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryRemote extends _i1.Mock implements _i6.CategoryRemote {
  @override
  _i3.Future<List<_i4.CategoryModel>> getCategory() => (super.noSuchMethod(
        Invocation.method(
          #getCategory,
          [],
        ),
        returnValue:
            _i3.Future<List<_i4.CategoryModel>>.value(<_i4.CategoryModel>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.CategoryModel>>.value(<_i4.CategoryModel>[]),
      ) as _i3.Future<List<_i4.CategoryModel>>);
  @override
  _i3.Future<void> addCategory(_i4.CategoryModel? dataCategory) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCategory,
          [dataCategory],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> updateCategory(_i4.CategoryModel? dataCategory) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCategory,
          [dataCategory],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> deleteCategory(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteCategory,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
