// Mocks generated by Mockito 5.3.2 from annotations
// in portfolio/test/features/overview/data/repositories/traffic_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:portfolio/core/network/network_info.dart' as _i5;
import 'package:portfolio/features/overview/data/datasources/traffic_local.dart'
    as _i3;
import 'package:portfolio/features/overview/data/datasources/traffic_remote.dart'
    as _i6;
import 'package:portfolio/features/overview/data/models/traffic_model.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTrafficModel_0 extends _i1.SmartFake implements _i2.TrafficModel {
  _FakeTrafficModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TrafficLocal].
///
/// See the documentation for Mockito's code generation for more information.
class MockTrafficLocal extends _i1.Mock implements _i3.TrafficLocal {
  MockTrafficLocal() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.TrafficModel> getLastTraffic() => (super.noSuchMethod(
        Invocation.method(
          #getLastTraffic,
          [],
        ),
        returnValue: _i4.Future<_i2.TrafficModel>.value(_FakeTrafficModel_0(
          this,
          Invocation.method(
            #getLastTraffic,
            [],
          ),
        )),
      ) as _i4.Future<_i2.TrafficModel>);
  @override
  _i4.Future<void> cacheTraffic(_i2.TrafficModel? trafficToCache) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheTraffic,
          [trafficToCache],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i5.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [TrafficRemote].
///
/// See the documentation for Mockito's code generation for more information.
class MockTrafficRemote extends _i1.Mock implements _i6.TrafficRemote {
  @override
  _i4.Future<_i2.TrafficModel> getTraffic() => (super.noSuchMethod(
        Invocation.method(
          #getTraffic,
          [],
        ),
        returnValue: _i4.Future<_i2.TrafficModel>.value(_FakeTrafficModel_0(
          this,
          Invocation.method(
            #getTraffic,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.TrafficModel>.value(_FakeTrafficModel_0(
          this,
          Invocation.method(
            #getTraffic,
            [],
          ),
        )),
      ) as _i4.Future<_i2.TrafficModel>);
}
